type Query {
  getUser(id: Int!): User
  getUsers: [User!]!
  refresh: Refresh
}
type Mutation {
  registration(user: Registration!): User
  login(user: Login!): User
  update(id: Int!, user: UpdateUser): UpdateUserQuery
  remove(id: Int!): Boolean
  logout(refreshToken: String!): Boolean
}
type Refresh {
  refreshToken: String
  accessToken: String
  user: RefreshUserQuery
}
type RefreshUserQuery {
  id: Int
  email: String
  login: String
  avatar: String
  isActivated: Boolean
  createdAt: Date
}
type UpdateUserQuery {
  id: Int
  email: String
  login: String
  avatar: String
  activationLink: String
  isActivated: Boolean
  createdAt: Date
}
type User {
  id: Int
  email: String
  login: String
  avatar: String
  activationLink: String
  isActivated: Boolean
  createdAt: Date
  accessToken: String
  refreshToken: String
}
input UpdateUser {
  email: String
  pass: String
  login: String
  avatar: String
  activationLink: String
  isActivated: Boolean
  accessToken: String
  refreshToken: String
}
input Registration {
  email: String!
  pass: String!
  pass2: String!
}
input Login {
  email: String!
  pass: String!
}
